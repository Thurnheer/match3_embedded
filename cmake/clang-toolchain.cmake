# clang Toolchain

set(CMAKE_SYSTEM_NAME Generic)

# avoid running the compiler check
set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)

set(CMAKE_SYSTEM_PROCESSOR arm)

if(MINGW OR CYGWIN OR WIN32)
    set(UTIL_SEARCH_CMD where)
elseif(UNIX OR APPLE)
    set(UTIL_SEARCH_CMD which)
endif()

set(TOOLCHAIN_PREFIX "arm-none-eabi")

set(CMAKE_SYSTEM_PROCESSOR XMC4X00)

execute_process(
    COMMAND ${UTIL_SEARCH_CMD} ${TOOLCHAIN_PREFIX}-gcc
    OUTPUT_VARIABLE BINUTILS_PATH
    OUTPUT_STRIP_TRAILING_WHITESPACE
)

get_filename_component(ARM_TOOLCHAIN_DIR ${BINUTILS_PATH} DIRECTORY)

set(CMAKE_C_COMPILER "clang")
set(CMAKE_ASM_COMPILER "clang")
set(CMAKE_CXX_COMPILER "clang++")
set(CMAKE_GCC_LINKER "/usr/bin/arm-none-eabi-g++")
set(CMAKE_C_LINK_EXECUTABLE "${CMAKE_GCC_LINKER}  <CMAKE_CXX_LINK_FLAGS>  <LINK_FLAGS> <OBJECTS> <LINK_LIBRARIES> -o <TARGET>")
set(CMAKE_CXX_LINK_EXECUTABLE ${CMAKE_C_LINK_EXECUTABLE})

set(CMAKE_OBJCOPY ${ARM_TOOLCHAIN_DIR}/${TOOLCHAIN_PREFIX}-objcopy CACHE INTERNAL "objcopy tool")
set(CMAKE_SIZE_UTIL ${ARM_TOOLCHAIN_DIR}/${TOOLCHAIN_PREFIX}-size CACHE INTERNAL "size tool")
set(CMAKE_GCC_TOOLCHAIN ${ARM_TOOLCHAIN_DIR}/${TOOLCHAIN_PREFIX})

add_definitions(-DXMC4700_F144x2048 -DXMC_ASSERT_ENABLE -DXMC4x00)
add_definitions(-DCMAKE_CXX_FLAGS="-fuse-ld=${CMAKE_GCC_TOOLCHAIN}/bin/ld")

set(CMAKE_FIND_ROOT_PATH ${BINUTILS_PATH})
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

#set(CMAKE_EXECUTABLE_SUFFIX_C        .elf) 
#set(CMAKE_EXECUTABLE_SUFFIX_CXX      .elf)

set(LINKER_SCRIPT "${PROJECT_SOURCE_DIR}/Application\.EZ/anterior/anterior/gcc_linker_script.ld")
